<?php

/**
 * @file
 * The core that builds the tree on comment
 * insert, update, and delete. Also builds
 * a Batch for rebuilding the comment tree.
 */

/**
 * Implements hook_comment_insert().
 *
 * When a comment is inserted, create it's tree.
 *
 */
function comment_tree_comment_insert($comment) {

  // Add the Link to itself (Depth 0)
  $query = db_insert('comment_tree');
  $query->fields(array(
    'ancestor' => $comment->cid,
    'descendant' => $comment->cid,
    'depth' => 0,
  ));
  $query->execute();

  if (!empty($comment->pid)) {

    // Get the tree of the comment's parent
    $query = db_select('comment_tree', 'c');
    $query->fields('c', array('ancestor', 'depth'));
    $query->condition('c.descendant', $comment->pid);
    $result = $query->execute();

    while ($record = $result->fetchAssoc()) {
      $query = db_insert('comment_tree');
      $query->fields(array(
        'ancestor' => $record['ancestor'],
        'descendant' => $comment->cid,
        'depth' => $record['depth'] + 1,
      ));
      $query->execute();
    }

  }

}

/**
 * Implements hook_comment_update().
 *
 * Move a Comment to it's New Parent's Tree
 * If the Parent has changed
 *
 */
function comment_tree_comment_update($comment) {

  if ($comment->original->pid != $comment->pid) {

    // First Remove the Tree above this comment
    // We'll use db_query since db_delete does not allow joining
    $query_string = 'DELETE a FROM {comment_tree} AS a ';
    $query_string .= 'JOIN {comment_tree} AS d ';
    $query_string .= 'ON a.descendant = d.descendant ';
    $query_string .= 'LEFT JOIN {comment_tree} AS x ';
    $query_string .= 'x.ancestor = d.ancestor AND x.descendant = a.ancestor ';
    $query_string .= 'WHERE d.ancestor = :cid AND ';
    $query_string .= 'x.ancestor IS NULL';
    db_query($query_string, array(':cid' => $comment->cid));

    // If the Comment has a Parent, move it under the new parent's tree
    if (!empty($comment->pid)) {

      $query = db_select('comment_tree', 'supertree');
      $query->addField('supertree', 'ancestor', 'ancestor');
      $query->addField('subtree', 'descendant', 'descendant');
      $query->addExpression('supertree.depth+subtree.depth+1', 'depth');
      $query->join('comment_tree', 'subtree');
      $query->condition('subtree.ancestor', $comment->cid);
      $query->condition('supertree.descendant', $comment->pid);
      $result = $query->execute();

      while ($record = $result->fetchAssoc()) {
        $query = db_insert('comment_tree');
        $query->fields(array(
          'ancestor' => $record['ancestor'],
          'descendant' => $record['descendant'],
          'depth' => $record['depth'],
        ));
        $query->execute();
      }

    }

  }
  
}

/**
 * Implements hook_comment_delete().
 *
 * Deletes the Comment's Tree on Comment Delete
 *
 */
function comment_tree_comment_delete($comment) {

  $query = db_delete('comment_tree');
  $or = db_or();
  $or->condition('ancestor', $comment->cid);
  $or->condition('descendant', $comment->cid);
  $query->condition($or);
  $query->execute();

}

/**
* Implements hook_menu().
*/
function comment_tree_menu() {

   // Admin Pages
  $items['admin/config/system/comment-tree'] = array(
    'title' => 'Comment Tree',
    'description' => 'Generate the Comment Tree',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('comment_tree_generate_form'),
    'access arguments' => array('administer comment_tree'),
  );

  return $items;
}

/**
* Implements hook_permission().
*/
function comment_tree_permission() {
  return array(
    'administer comment_tree' => array(
      'title' => t('Administer Comment Tree'),
      'restrict access' => TRUE,
    ),
  );
}

/**
* Generate Form; Build Form
*/
function comment_tree_generate_form($form, &$form_state) {

  $link = l(t('Maintenance Mode'), 'admin/config/development/maintenance');
  
  $info_string = 'Generating a new Comment Tree will delete ';
  $info_string .= 'the current tree and generate a new one. ';
  $info_string .= 'It is highly recommended that you first ';
  $info_string .= 'put your site in !link.';
  $form['info'] = array(
    '#markup' => t($info_string, array('!link' => $link)),
  );

  $form['actions'] = array(
    '#type' => 'actions',
  );
  $form['actions']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Generate'),
  );

  return $form;

}

/**
* Generate Form; Form Submit
*/
function comment_tree_generate_form_submit($form, &$form_state) {

  $batch = array(
    'title' => t('Generating Comment Tree'),
    'operations' => array(
      array('comment_tree_generate', array()),
    ),
  );
  batch_set($batch);

}

/**
* Comment Tree Generate
*/
function comment_tree_generate(&$context) {

    if (!isset($context['sandbox']['total'])) {

       $query = db_select('comment', 'c');
       $query->fields('c', array('cid'));
       $query->orderBy('cid', 'DESC');
       $query->range(0,1);
       $last = $query->execute()->fetchField();

       $context['sandbox']['total'] = $last;

       if (empty($context['sandbox']['total'])) {
         $context['finished'] = 1;
         drupal_set_message(t('No Comments to Process.'));
         return;
       }

       $query = db_delete('comment_tree');
       $query->execute();

       $context['finished'] = 0;
       $context['sandbox']['current'] = 0;

    }

    $query = db_select('comment', 'c');
    $query->fields('c', array('cid', 'pid'));
    $query->orderBy('cid');
    $query->condition('cid', $context['sandbox']['current'], '>');
    $query->range(0,5);
    $batch = $query->execute();

    while ($current = $batch->fetchAssoc()) {

      // Add the Link to itself (Depth 0)
      $query = db_insert('comment_tree');
      $query->fields(array(
        'ancestor' => $current['cid'],
        'descendant' => $current['cid'],
        'depth' => 0,
      ));
      $query->execute();

      if (!empty($current['pid'])) {

        // Get the tree of the comment's parent
        $query = db_select('comment_tree', 'c');
        $query->fields('c', array('ancestor', 'depth'));
        $query->condition('c.descendant', $current['pid']);
        $result = $query->execute();

        while ($record = $result->fetchAssoc()) {
          $query = db_insert('comment_tree');
          $query->fields(array(
            'ancestor' => $record['ancestor'],
            'descendant' => $current['cid'],
            'depth' => $record['depth'] + 1,
          ));
          $query->execute();
        }

      }

      $context['sandbox']['current'] = $current['cid'];

    }

    $context['message'] = 'Now Processing Comment ' . $context['sandbox']['current'];
    $context['finished'] = $context['sandbox']['current'] / $context['sandbox']['total'];

    if ($context['finished'] == 1) {
      drupal_set_message(t('Comment Tree Generation Complete.'));
    }

}
